### Expense Bill Scanner using LLM

from dotenv import load_dotenv
load_dotenv()  

import streamlit as st
import os
from PIL import Image
import google.generativeai as genai

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

#LLm
def get_gemini_response(input_text, image, prompt):
    model = genai.GenerativeModel('gemini-1.5-flash')
    response = model.generate_content([input_text, image[0], prompt])
    return response.text

def input_image_setup(uploaded_file):
    if uploaded_file is not None:
        bytes_data = uploaded_file.getvalue()
        image_parts = [
            {
                "mime_type": uploaded_file.type,
                "data": bytes_data
            }
        ]
        return image_parts
    else:
        raise FileNotFoundError("No file uploaded")

st.set_page_config(page_title="Image Insights")

st.header("Create or Edit a Payment")

#society = st.text_input("Society *")
#payment_category = st.text_input("Payment Category *")
#flat_owner = st.text_input("Flat No. - Owner")
#payment_date = st.date_input("Payment Date *")
#net_payment = st.text_input("Net Payment ₹")
#payment_mode = st.selectbox("Payment Mode", ["Online", "Offline","Cheque"])
#payment_from = st.text_input("Payment From")
#physical_location = st.text_input("Physical Location")
#gross_payment = st.text_input("Gross Payment ₹")
#note = st.text_input("Note")
#payment_year = st.text_input("Payment Year")


input_prompt = st.text_input("Input Prompt: ", key="input")
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
image = ""   
if uploaded_file is not None:
    image = Image.open(uploaded_file)
    st.image(image, caption="Uploaded Image.", use_column_width=True)

submit = st.button("Tell me about the image")

base_prompt = """
You are an expert in understanding invoices.
You will receive input images as invoices &
you will have to answer questions based on the input image.
"""

if submit:
    image_data = input_image_setup(uploaded_file)
    
    final_prompt = f"""
    {base_prompt}
    
    User Input: {input_prompt}
    """
    
    response = get_gemini_response(input_prompt, image_data, final_prompt)
    st.subheader("The Response is")
    st.write(response)
